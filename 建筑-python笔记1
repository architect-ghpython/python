<<-！grasshopper编程和一般的编程一样，会了grasshopper即会编程。逻辑思维即算法非常重要，只会工具（相当于一门编程语言）没用，程序员都还要学习算法呢
在grosshopper中写的再简单的程序都有算法，
所以任何零基础的人，哪怕天才一个月学会算法，即学会grasshopper的逻辑无异于天方夜谭，
一个月会的只是模仿他人的例子，即他教给的你这个方案会用，自己的建筑方案抓瞎
要有耐心，需要的是时间，几个月，一年，五年......-->
grasshopper数据的处理(数据结构,即sets工具组)是难点,很重要，而且有时不能很好的处理数据，所以python中的列表元素及字典对于建筑师来说很有用处
grasshopper的数据处理没有循环结构，可以用python等编程语言来弥补并提高效率
序列是一种数据储存方式
包含字符串，列表，元素，字典，集合
a = {10,20,30,40}
python中一切皆对象
列表：用于存储任意数目，任意类型的数据集合，可以放任意的数据类型
a={10,20,'abc',True}
list.append(x) 增加元素 将元素x增加到列表list尾部
list.extend(aList) 增加元素 将列表alist所有元素增加到列表list尾部
list.insert(insert(index,x)增加元素 在列表list指定位置index处插入元素x
list.remove(x)删除元素 在列表list中删除首次出现的元素
list.pop([index])删除并返回列表list指定为止index处的元素，默认是最后一个元素
list.clear()删除所有元素 删除列表所有元素，并不是删除列表对象
list.index(x)访问元素 返回第一个x的索引位置，若不存在x元素抛出异常
list.count(x)计数 返回指定元素x在list列表出现的次数
len(list)列表长度 返回列表中包含元素的个数
list.reverse()反转列表所有元素原地反转
list.sort()排序所有元素原地排序
list.copy()浅拷贝 返回列表对象的浅拷贝
python的列表大小可变，根据需要随时增加或缩小  java中的数组不能变
字符串和列表都是序列类型 一个字符串是一个字符序列 一个列表是任何元素的序列
列表的创建
1 []创建
>>>a=[0,1,2'qer']
>>>a
[0,1,2,'qer']
>>>a=[]
>>>a.append(20)
>>>a
[20]
2 list创建
>>>a=list()
#list可以把字符串转化为列表
>>>a=list('yyy')
>>>a
['y','y','y']
#把整数转化为列表
>>>range(10)
range(0,10)
>>>a=range(10)
>>>type(a)
<class'range'>
>>>list(a)
[0,1,2,3,4,5,6,7,8,9]
>>>list(range(10))
[0,1,2,3,4,5,6,7,8,9]
3 range()创建整数列表
格式：range([start,end,step])
>>>list(range(0,10,1))
[0,1,2,3,4,5,6,7,8,9,10]
>>>list(range(3,20,2))
[3,5,7,9,11,13,15,17,19]
>>>list(range(20,3,-1)
[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4]
>>> list(range(-10,-33,-1))
[-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32]
推导式
>>> a=[x*2 for x in range(5)]  #循环创建多个元素
>>> a
[0, 2, 4, 6, 8]
>>> a=[x*2 for x in range(100) if x%9==0]
>>> a
[0, 18, 36, 54, 72, 90, 108, 126, 144, 162, 180, 198]

列表元素的增加和删除 都会对列表的内存产生影响（大量的数据拷贝）
1 append()方法
>>> a=[20,40]
>>> a.append(100)
>>> a
>>> a.append(200)
>>> a
[20, 40, 100, 200]
[20, 40, 100]
2 +运算符操作  （并不是在尾部添加元素，而是创建新的列表，牵扯大量复制）
>>> a=[20, 40, 100, 200]
>>> id(a)
1968964153032
>>> a=a+[50]
>>> id(a)
1968964159176
3 extend()方法
>>> a=[20,40]
>>> a.extend([100,200])
>>> a
[20, 40, 100, 200]
4 insert方法插入元素
>>> a=[10,20,30,40]
>>> a.insert(2,100)
>>> a
[10, 20, 100, 30, 40]
>>> a.remove(100)
>>> a
[10, 20, 30, 40]

乘法扩展
>>> a='text'*3  #字符串
>>> a
'texttexttext' 
>>> a*3
[20, 30, 20, 30, 20, 30]

del删除（本质上还是数组的拷贝）
>>> del a[2]
>>> a
[100, 200, 400]

pop方法 （删除并返回指定位置的元素，若未指定位置则默认操作列表最后一个元素）
>>> a=[10,20,30,40,50]
>>> b=a.pop()
>>> b
50
>>> c=a.pop(1)
>>> c
20
>>> a
[10, 30, 40]

remove方法 （删除首次出现的元素，不存在则抛出异常）
>>> a=[10,20,30,40,50,60]
>>> a.remove(20)
>>> a
[10, 30, 40, 50, 60]

列表的访问和计数
可以通过列表直接访问对象，索引区间为（0，列表长度-1）
>>> a=[10,20,30,10,20,40,20]
>>> a[5]
40
>>> a[7]
Traceback (most recent call last):
  File "<pyshell#66>", line 1, in <module>
    a[7]
IndexError: list index out of range

index()获得指定元素在列表中首次出现的索引
语法是index(value,[start,[end]])
>>> a=3*[10,20]
>>> a
[10, 20, 10, 20, 10, 20]
>>> a.index(20)
>>> a.index(20,3)
3

count()获得指定元素在列表中出现的次数
>>> a=3*[10,20]
>>> a.count(20)
3
len()返回列表长度
>>> a=[10,20,30]
>>> len(a)
3
成员资格判断
>>> a=[20.30,10,20,40]
>>> 20 in a
True
>>> 50 in a
False
>>> 50 not in a
True

切片操作slice（快速提取子列表或修改。
标准格式：[起始偏移量 start:终止偏移量 end:[步长 step]]
>>> a=[30,40,50,60]
>>> a[:]
[30, 40, 50, 60]
>>> a[1:3:1]
[40, 50]
>>> #包头不包尾巴
>>> a[1::2]
[40, 60]
>>> a[1:]
[40, 50, 60]
>>> a[:2]
[30, 40]
>>> [10,20,30,40,50,60,70,80,90,100][-3]
80
>>> [10,20,30,40,50,60,70,80,90,100][-3:]
[80, 90, 100]
>>> [10,20,30,40,50,60,70,80,90,100][-5:-3]
[60, 70]
>>> [10,20,30,40,50,60,70,80,90,100][::-1]
[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]
>>> #从右到左，反向提取
列表的遍历：
>>> for x in a:
	print(x)

	
30
40
50
60

列表的排序
>>> a=[20,10,30,40]
>>> id(a)
1968964153096
>>> a.sort()     #默认是升序
>>> id(a)
1968964153096
>>> a.sort(reverse=True)
>>> a
[40, 30, 20, 10]
>>> import random
>>> random.shuffle(a)
>>> a
[10, 30, 40, 20]
